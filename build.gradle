buildscript {
    // We use this to specify the globally applied list of repos (see subprojects block later)
    repositories {
        mavenCentral()
    }
}

plugins {
    id "org.sonarqube" version "2.5"
}

def jacocoDestination = "$rootProject.buildDir/jacoco/test.exec"
sonarqube {
    properties {
        property "sonar.host.url", "https://sonar.it-stockinger.de"
        property "sonar.login", System.getenv("SONAR_USER")
        property "sonar.password", System.getenv("SONAR_PASSWORD")
        property "sonar.jacoco.reportPaths", jacocoDestination
        property "sonar.buildbreaker.skip", "false"
    }
}

allprojects {
    // Settings for all projects
    repositories.addAll(rootProject.buildscript.repositories)

    group "com.dajudge.testee"
    version "0.0.1-SNAPSHOT"

    apply plugin: 'jacoco'
}

def ignoreTestFailures = Boolean.valueOf(System.getenv("IGNORE_TEST_FAILURES") ?: "false")
subprojects {
    buildscript.repositories.addAll(rootProject.buildscript.repositories)

    apply plugin: 'maven'
    apply plugin: 'signing'

    afterEvaluate { Project project ->
        if (project.pluginManager.hasPlugin("java")) {

            jacocoTestReport.reports.xml.enabled = true

            project.tasks.withType(Test) {
                jacoco {
                    destinationFile = file(jacocoDestination)
                }
            }

            compileJava {
                options.encoding = 'UTF-8'
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            }
            test {
                ignoreFailures = ignoreTestFailures
            }

            uploadArchives {
                repositories {
                    mavenDeployer {
                        repository(url: "https://maven.it-stockinger.de/nexus/content/repositories/releases/") {
                            authentication(userName: System.getenv("MAVEN_USER"), password: System.getenv("MAVEN_PASSWORD"))
                        }

                        snapshotRepository(url: "https://maven.it-stockinger.de/nexus/content/repositories/snapshots/") {
                            authentication(userName: System.getenv("MAVEN_USER"), password: System.getenv("MAVEN_PASSWORD"))
                        }
                        pom.project {
                            name "TestEE.fi - ${project.name} module"
                            artifactId "testee-${project.name}"
                            packaging 'jar'
                            description 'Functional testing for Java-EE.'
                            url 'https://github.com/dajudge/testee'

                            scm {
                                connection 'scm:git:https://github.com/dajudge/testee.git'
                                developerConnection 'scm:git:https://github.com/dajudge/testee.git'
                                url 'https://github.com/dajudge/testee.git'
                            }

                            licenses {
                                license {
                                    name 'The Apache License, Version 2.0'
                                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                }
                            }

                            developers {
                                developer {
                                    id 'alexs'
                                    name 'Alex Stockinger'
                                    email 'alex@it-stockinger.de'
                                }
                            }
                        }
                    }
                }
            }
            task javadocJar(type: Jar) {
                classifier = 'javadoc'
                from javadoc
            }
            task sourcesJar(type: Jar) {
                classifier = 'sources'
                from sourceSets.main.allSource
            }
            artifacts {
                archives javadocJar, sourcesJar
            }
            signing {
                sign configurations.archives
            }
        }
    }
}
ext {
    // Dependencies
    libSlf4j = 'org.slf4j:slf4j-api:1.7.21'
    libLogback = 'ch.qos.logback:logback-classic:1.1.7'
    libWeld = 'org.jboss.weld:weld-core-impl:2.4.3.Final'
    libMockito = 'org.mockito:mockito-core:2.2.11'
    libEasyMock = 'org.easymock:easymock:3.4'
    libJavaEE = 'javax:javaee-api:7.0'
    libCommonsLang3 = 'org.apache.commons:commons-lang3:3.2'
    libCommonsIO = 'commons-io:commons-io:2.4'
    libJUnit4 = 'junit:junit:4.12'
    libJUnit5Engine = 'org.junit.jupiter:junit-jupiter-engine:5.0.0-M6'
    libJUnit5Api = 'org.junit.jupiter:junit-jupiter-api:5.0.0-M6'
    libJUnit5PlatformLauncher = 'org.junit.platform:junit-platform-launcher:1.0.0-M6'
    libJUnit5GradlePlugin = 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M6'
    libEclipseLink = 'org.eclipse.persistence:eclipselink:2.6.0'
    libH2 = 'com.h2database:h2:1.4.196'
    libGroovy = 'org.codehaus.groovy:groovy-all:2.4.12'
    libPsql = 'org.postgresql:postgresql:42.1.3'
    libFlyway = 'org.flywaydb:flyway-core:4.2.0'
    libLiquibase = 'org.liquibase:liquibase-core:3.5.3'
    libLiquibaseSlf4j = 'com.mattbertolini:liquibase-slf4j:1.2.1'
    libScannotation = 'org.scannotation:scannotation:1.0.3'
    libJavassist = 'org.javassist:javassist:3.21.0-GA'
}

task wrapper(type: Wrapper) {
    // As of 2017-03-15 the IntelliJ gradle plugin had problems with dependency scopes
    // with gradle 3.4 and later, so we're sticking to 3.3 for now.
    gradleVersion = '3.3'
}

task clean {
    doLast {
        delete buildDir
    }
}